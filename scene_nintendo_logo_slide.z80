INCLUDE "Hardware.inc"
INCLUDE "rgbgrafx/rgbgrafx.inc"

Section "Nintendo Logo Slide",CODE
scene_nintendo_logo_slide::
  ; Initialize variables
  xor A
  ld [scene_done], A
  ld [split_amount], A
  ld [fade_delay], A

  di
  ; Enable LCDC interrupt
  ld A, [rIE]
  or IEF_LCDC
  ld [rIE], A

  ; Set V-blank handler
  ld BC, vblank_interrupt
  call set_vblank_interrupt

  ; Set LCDC handler
  ld BC, lcdc_interrupt
  call set_lcdc_interrupt

  ; Enable coincidence flag to cause an interrupt
  ; when LY equals LYC
  ld A, [rSTAT]
  or STATF_LYC
  ld [rSTAT], A

  ; Set initial LYC value
  ld A, 0
  ld [rLYC], A
  ei
.loop:
  halt
  ld A, [scene_done]
  cp 1
  jr nz, .loop
  ret

vblank_interrupt:
  RGBG_WaitForVRAM
  xor A
  ld [rLYC], A
  ld A, [split_amount]
  inc A
  ld [split_amount], A
  ; Start fade after 20 V-blanks
  ld B, $20
  cp B
  jr c, .skip_fade
  ; Wait 10 V-blanks before each palette change to slow things down.
  ld A, [fade_delay]
  cp $10
  jr z, .delay_over
  inc A
  ld [fade_delay], A
  jr .skip_fade
.delay_over:
  ; Execute actual palette change
  xor A
  ld [fade_delay], A
  ld A, [rBGP]
  ld B, A
  and %00001111
  cp $00
  jr z, .skip_fade
  ld A, B
  sub %0100
  ld [rBGP], A
.skip_fade:
  ; Set scene_done after $7A V-blanks
  ld A, [split_amount]
  ld B, $7A
  cp B
  jr nz, .return
  ld A, 1
  ld [scene_done], A
.return:
  ret

lcdc_interrupt:
  RGBG_WaitForVRAM
  ; Check if scanline is odd or even to determine direction
  ld A, [rLY]
  and 1
  jr nz, .odd
.even:
  ; On even lines SCX increases
  ld A, [split_amount]
  ld [rSCX], A
  jr .rest
.odd:
  ; On odd lines SCX decreases
  ld A, [split_amount]
  ld B, A
  ld A, $FF
  sub B
  ld [rSCX], A
.rest
  ; Increment LYC on every line
  ld A, [rLYC]
  inc A
  ld [rLYC], A
  ret

Section "Variables",BSS
split_amount: DS 1
scene_done: DS 1
fade_delay: DS 1
