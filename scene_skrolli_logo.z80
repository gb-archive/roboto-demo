INCLUDE "Hardware.inc"
INCLUDE "rgbgrafx/rgbgrafx.inc"

Section "Skrolli Logo Data",DATA
INCLUDE "imagedata/skrolli_logo.inc"

Section "Skrolli Logo",CODE
scene_skrolli_logo::
  di
  call initialize_interrupts
  ei
  ; Set all palette colors to black for the duration of loading image data
  RGBG_WaitForVRAM
  ld A, $FF
  ld [rBGP], A

  ; Initialize high byte of the tileset starting address
  ld A, $80
  ld [RGBG_tileset], A
  ; Load tile patterns to VRAM
  ld BC, skrolli_tile_data
  ld D, $FF
  ld E, 0
  RGBG_WaitForVRAM
  call RGBG_LoadTiles

  ; Initialize high byte of the tilemap starting address
  ld A, $98
  ld [RGBG_tilemap], A

  ; Set tilemap offset to zero
  xor A
  ld [RGBG_map_offset], A

  ; Load tile map
  RGBG_WaitForVRAM
  ld BC, skrolli_map_data
  ld H, $0
  ld L, $0
  ld E, skrolli_tile_map_width
  ld D, skrolli_tile_map_height
  call RGBG_SetTileMap

  ; Draw black window on top of background
  ; Store window tilemap in $9C00-$9FFF
  ld A, $9C
  ld [RGBG_tilemap], A
  ; Tile to fill the area of the map with
  ; We know the first tile in the Skrolli logo image is black
  ld B, 0
  ld H, 0 ; Y-coordinate of upper left corner of the area to set in VRAM
  ld L, 0 ; X-coordinate of upper left corner of the area to set in VRAM
  ld D, 32 ; Height of area in VRAM to set
  ld E, 32 ; Width of area in VRAM to set
  RGBG_WaitForVRAM
  call RGBG_FillTileMap
  ld A, [rLCDC]
  or LCDCF_WINON ; Enable window
  or LCDCF_WIN9C00 ; Use tilemap in $9C00-$9FFF for window
  ld [rLCDC], A

  ; Reset background scroll registers
  xor A
  ld [rSCX], A
  ld [rSCY], A

  ; Reset color palette to default
  RGBG_WaitForVRAM
  ld A, %11100100
  ld [rBGP], A
  ld [rOBP0], A
  ld [rOBP1], A

  ; Animate window sliding from left to right
  xor A ; Set A to zero
  add 7 ; Visible portion of window starts at rWX == 7
  ld B, A
.loop
  xor A
.innerloop
  ; Busywait to slow sliding window
  inc A
  cp $FF
  jr nz, .innerloop

  RGBG_WaitVBL
  ld A, B
  ld [rWX], A
  inc A
  ld B, A
  cp 166 ; Visible portion of window ends at rWX == 166
  jr nz, .loop

  ld A, $FF
.delay_loop:
  halt
  dec A
  jr nz, .delay_loop

  ret
