INCLUDE "gbt_player/gbt_player.inc"
INCLUDE "Hardware.inc"

GLOBAL VBlank_Address
GLOBAL LCDC_Address

Section "RST 00",HOME[$00]
  ; This is called if an interrupt handler address is set to zero.
  ret

Section "RST 08",HOME[$08]
  ; Jump to function in HL and return to caller of RST.
  jp HL

Section "V-Blank ISR",HOME[$40]
  jp VBlank

Section "LCDC ISR",HOME[$48]
  jp LCDC

Section "Interrupt boilerplate",HOME
VBlank:
  push AF
  push BC
  push DE
  push HL
  ; Update music at V-blank
  ld A, [music_playing]
  cp $0
  jr z, .after_gbt_update
  call gbt_update
.after_gbt_update:
  ld HL, VBlank_Address
  jr interrupt_common

LCDC:
  push AF
  push BC
  push DE
  push HL
  ld HL, LCDC_Address
  jr interrupt_common

interrupt_common:
  ld	A, [HL+]
  ld	H, [HL]
  ld	L, A
  ; Call address at HL and return here
  rst $08
  pop HL
  pop DE
  pop BC
  pop AF
  reti

initialize_interrupts::
  ; Point all interrupt handlers to $00 so they do nothing.
  ; Disables interrupts, must be manually enabled again.
  di
  xor A
  ld HL, VBlank_Address
  ld [HL+], A
  ld [HL], A
  ld HL, LCDC_Address
  ld [HL+], A
  ld [HL], A
  ld A, IEF_VBLANK
  ld [rIE], A
  ret

; BC = function pointer
set_vblank_interrupt::
  ld HL, VBlank_Address
  jr interrupt_setter_common

; BC = function pointer
set_lcdc_interrupt::
  ld HL, LCDC_Address
  jr interrupt_setter_common

interrupt_setter_common:
  di
  ld [HL], C
  inc HL
  ld [HL], B
  ei
  ret

Section "Interrupt handler addresses",BSS
VBlank_Address: DS 2
LCDC_Address: DS 2
; music_playing == 0, music not playing
; music_playing == 1, music is playing
music_playing:: DS 1
