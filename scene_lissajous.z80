INCLUDE "Hardware.inc"
INCLUDE "rgbgrafx/rgbgrafx.inc"

Section "Robot image data",data
INCLUDE "imagedata/robot.inc"

Section "Lissajous curve scene",CODE
scene_lissajous::
  xor A
  ld [frame_number], A
  ld [rotation], A

  ; Set all palette colors to black for the duration of loading image data
  RGBG_WaitForVRAM
  ld A, $FF
  ld [rBGP], A
  ld [rOBP0], A

  ; Initialize high byte of the tileset starting address
  ld A, $88
  ld [RGBG_tileset], A
  ; Load tile patterns to VRAM
  ld BC, robot_tile_data
  ld D, $FF
  ld E, 0
  RGBG_WaitForVRAM
  call RGBG_LoadTiles

  ; Initialize high byte of the tilemap starting address
  ld A, $98
  ld [RGBG_tilemap], A

  ; Set tilemap offset
  ld A, 128
  ld [RGBG_map_offset], A

  ; Load tile map
  RGBG_WaitForVRAM
  ld BC, robot_map_data
  ld H, $0
  ld L, $0
  ld E, robot_tile_map_width
  ld D, robot_tile_map_height
  call RGBG_SetTileMap

  ; Position background image
  ld A, 85
  ld [rSCX], A

  di ; Disable interrupts during setup

  ; Reset interrupt handlers
  call initialize_interrupts

  ; Enable V-blank and timer interrupts
  ld A, IEF_VBLANK | IEF_TIMER
  ld [rIE], A

  ; When timer interrupt triggers, load 0 to TIMA
  xor A
  ld [rTMA], A
  ; Initialize timer variable to zero
  ld [timer], A

  ; Set timer to increment 4096 times a second
  ld A, 4
  ld [rTAC], A

  ; Set timer interrupt
  ld BC, lissajous_timer
  call set_timer_interrupt

  ; Configure LCD controller
  ld A, (LCDCF_ON | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_BGON | LCDCF_OBJ8 | LCDCF_OBJON)
  ld [rLCDC], A

  ; Initialize high byte of the sprite tileset starting address
  ld A, $80
  ld [RGBG_tileset], A

  ; Load point sprite tile into VRAM
  ld BC, point_sprite
  ld D, 1
  ld E, 0
  call RGBG_LoadTiles
  call RGBG_ZeroOAM
  call RGBG_CopyDMARoutine

; Set all 40 sprites to show same pattern
  xor A
  ld B, A
.sprite_creation_loop:
  push AF
  call RGBG_SetSpriteTile
  pop AF
  inc A
  cp 40
  jr c, .sprite_creation_loop

; Set all sprites to 0,0
  xor A
  ld B, A
  ld C, A
.sprite_initial_position_loop:
  push AF
  call RGBG_SetSpritePos
  pop AF
  inc A
  cp 40
  jr c, .sprite_initial_position_loop

  RGBG_WaitVBL
  call RGBG_DoDMA ; Send sprite data to OAM

  ; Set interrupt handler
  ld BC, lissajous_vblank
  call set_vblank_interrupt

  ; Reset color palette to default
  RGBG_WaitForVRAM
  ld A, %11100100
  ld [rBGP], A
  ld [rOBP0], A
  ld [rOBP1], A

  ei ; Enable interrupts again

.loop:
  halt
  ld A, [timer]
  ; Exit after 96 / 16 = 6 seconds
  cp 96
  jr nz, .loop
  ; Disable sprites
  ld A, [rLCDC]
  and %11111101
  ld [rLCDC], A
  ret

lissajous_timer:
  ld A, [timer]
  inc A
  ld [timer], A
  ret

lissajous_vblank:
  ld A, [rotation]
  ld H, A ; Set rotation to H
  ld A, [frame_number] ; Get frame number to index LUTs
  ld D, A ; Save frame number to D
  ld E, 40 ; Use E as sprite counter

.loop_start:
  swap E ; Multiply sprite counter with 16 to use as offset
  ld A, D ; Load frame number to A
  add E
  add A
  add H
  ; Total index is now 2 * frame_number + 16 * sprite_counter + rotation
  call get_sine
  add 20 ; Position resulting curve by offsetting with 20 pixels
  ld B, A ; Set first sine value to X coordinate

  ld A, D ; Load frame number to A
  add E
  ; Total index is now frame_number + 16 * sprite_counter
  call get_sine ; Get sine value and save it to A
  add 40 ; Position resulting curve by offsetting with 50 pixels
  ld C, A ; Set second sine value to Y coordinate

  swap E ; Restore sprite number by dividing with 16
  ld A, E
  push HL
  call RGBG_SetSpritePos ; Save sprite position
  pop HL
  dec E
  jr nz, .loop_start
  push HL
  call RGBG_DoDMA ; Execute DMA
  pop HL

  ld A, D ; Return frame number to A
  inc A ; Increment frame number
  ld [frame_number], A ; Save frame number
  ld A, H
  inc A
  ld [rotation], A
  ret

; A = index from $00 to $FF
get_sine:
  push HL
  ld H, $2F
  ld L, A
  ld A, [HL]
  pop HL
  ret

point_sprite:
DW `00000000
DW `00000000
DW `00033000
DW `00333300
DW `00333300
DW `00033000
DW `00000000
DW `00000000

Section "Sine lookup-table",HOME[$2F00] ; Alignment to 00 important
sine_lut:
ANGLE   SET     0.0
        REPT    256
        DB      (MUL(30.0,SIN(ANGLE))+30.0)>>16
ANGLE   SET     ANGLE+256.0
        ENDR

Section "Lissajous variables",BSS
frame_number: DS 1
rotation: DS 1
timer: DS 1
